/* 
	Note: The identically named mixins and functions below is not a mistake; it means they can be used to either 
	output a string or to wrap some style rules in a selector
*/

//
// Prefixes and generates both silent placeholders and, if $o-grid-is-silent == false, concrete classes for a list of classnames
// If $compound is set to true it will handle compund selectors too
//
// oGridClass(row) => .o-grid-row, %o-grid-row
// oGridClass(row col) => .o-grid-row, %o-grid-row, .o-grid-col, %o-grid-col
// oGridClass((row col, box), true) => .o-grid-row .o-grid-col, %o-grid-row %o-grid-col, .o-grid-box, %o-grid-box
//
@function oGridClass ($classes, $compound: false) {
	$aggregated-selector: ();	
	
	@each $class in $classes {

		@if ($compound) {
			$loud-compound-selector: null;
			$silent-compound-selector: null;
			@each $part in $class {
				$silent-compound-selector: append($silent-compound-selector, #{'%o-grid-#{$part}'});
		    }
		    $aggregated-selector: append($aggregated-selector, $silent-compound-selector, comma);
			@if (not $o-grid-is-silent) {
				@each $part in $class {
					$loud-compound-selector: append($loud-compound-selector, #{'.o-grid-#{$part}'});
				}
				$aggregated-selector: append($aggregated-selector, $loud-compound-selector, comma);
			}				
		} @else {

			$aggregated-selector: append($aggregated-selector, #{'%o-grid-#{$class}'}, comma);
		  
			@if (not $o-grid-is-silent) {
				$aggregated-selector: append($aggregated-selector, #{'.o-grid-#{$class}'}, comma);
			}
		}
	}

	@return #{$aggregated-selector};
}

//
// Same as above but is immediately used to wrap some styles in the generated selector
//
@mixin oGridClass ($classes, $compound: false) {
	@include oGridWrapInSelector(oGridClass($classes, $compound)) { 
		@content 
	}
}


//
// Generates both silent placeholders and, if $o-grid-is-silent == false, concrete selectors for a given layout size and list of column widths
// If no $layout-size is specified the default selector for a column with no width specified is outputted
//
// oGridColumnSelector() => [class*="o-grid-col"], %o-grid-col
// oGridColumnSelector(s, 0 1) => [class*="|s0|"], [class*="|s1|"], %o-grid-s0, %o-grid-s1
// oGridClass(default, 8) => [class*="|8|"], %o-grid-8
//
@function oGridColumnSelector ($layout-size: null, $colspans: null) {

	$selector: null;

	@if (not $layout-size) {
		@if (not $o-grid-is-silent) {
			$selector: append($selector, #{'[data-o-grid-colspan]'}, comma);
		}
		$selector: append($selector, #{'%o-grid-col'}, comma);
		
	} @else {
		$prefix: $layout-size;

		@if ($layout-size == default) {
			$prefix: "";
		} 

		@each $colspan in $colspans {

			@if (not $o-grid-is-silent) {
				$selector: append($selector, #{'[data-o-grid-colspan~="#{$prefix}#{$colspan}"]'}, comma);
			}
			$selector: append($selector, #{'%o-grid-colspan-#{$prefix}#{$colspan}'}, comma);
		}		
	} 
	
	@return $selector;
}


//
// Same as above but is immediately used to wrap some styles in the generated selector
//
@mixin oGridColumnSelector ($layout-size: null, $colspan: null) {
	@include oGridWrapInSelector(oGridColumnSelector($layout-size, $colspan)) { 
		@content 
	}
}

//
// Adds placeholder classes to enable overriding of gutters at a given layout size
//
@mixin oGridGutterOverrides ($layout-size) {
	$suffix: -$layout-size;
	@if ($layout-size == default) {
		$suffix: "";
	}

	%o-grid-no-gutter#{$suffix},
	%o-grid-no-left-gutter#{$suffix} {
		padding-left: 0;

		&> .o-grid-row {
			margin-left: 0;
		}
	}

	%o-grid-no-gutter#{$suffix},
	%o-grid-no-right-gutter#{$suffix} {
		padding-right: 0;

		&> .o-grid-row {
			margin-right: 0;
		}
	}

}